import streamlit as st
import plotly.graph_objects as go

# Title for the Streamlit app
st.title("üåç Virtual AI World with Plotly")

# Introduction
st.write("""
    Welcome to the Virtual AI World. This app uses **Plotly** to display interactive 3D scatter plots, 
    where we represent different **AI entities** in a virtual world. Customize the AI entities and 
    visualize them in this dynamic environment!
""")

# Sidebar for AI entity customization
st.sidebar.header("Customize Your AI Entity")
ai_name = st.sidebar.text_input("AI Name", "AI_1")
ai_behavior = st.sidebar.selectbox("AI Behavior", ["Friendly", "Neutral", "Aggressive"])
ai_color = st.sidebar.color_picker("Choose AI Entity Color", "#ff6347")
ai_speed = st.sidebar.slider("AI Speed", 1, 10, 5)

# Button to deploy the AI entity
if st.sidebar.button("Deploy AI Entity"):
    # Add AI entity to the world (we store AI entity data in a dictionary)
    ai_entity = {
        "name": ai_name,
        "behavior": ai_behavior,
        "color": ai_color,
        "speed": ai_speed,
        "position": [random.uniform(-10, 10), random.uniform(-10, 10), random.uniform(-10, 10)],
    }
    st.success(f"Deployed {ai_name} into the world!")

# Create a simple Plotly 3D scatter plot to visualize the AI entities
fig = go.Figure(data=[go.Scatter3d(
    x=[1, 2, 3],
    y=[4, 5, 6],
    z=[7, 8, 9],
    mode='markers',
    marker=dict(size=12, color='rgba(255, 0, 0, .8)', symbol='circle'),
)])

# Customize the layout for mobile responsiveness and plot appearance
fig.update_layout(
    autosize=True,
    margin=dict(l=0, r=0, b=0, t=0),
    title="3D Scatter Plot Example",
    scene=dict(
        xaxis=dict(title='X Axis'),
        yaxis=dict(title='Y Axis'),
        zaxis=dict(title='Z Axis')
    )
)

# Display the Plotly chart in Streamlit
st.plotly_chart(fig)

# Interaction options for AI Entities (this part is optional)
if ai_entities:
    st.header("Interact with AI Entities")
    selected_ai = st.selectbox("Select AI Entity", [ai["name"] for ai in ai_entities])

    # Display selected AI entity details
    ai_info = next(ai for ai in ai_entities if ai["name"] == selected_ai)
    st.write(f"Name: {ai_info['name']}")
    st.write(f"Behavior: {ai_info['behavior']}")
    st.write(f"Color: {ai_info['color']}")
    st.write(f"Speed: {ai_info['speed']}")

    # Option to update AI behavior
    new_behavior = st.selectbox("Update Behavior", ["Friendly", "Neutral", "Aggressive"], index=["Friendly", "Neutral", "Aggressive"].index(ai_info["behavior"]))
    if st.button(f"Update {ai_info['name']}'s Behavior"):
        ai_info["behavior"] = new_behavior
        st.success(f"{ai_info['name']}'s behavior updated to {new_behavior}")
